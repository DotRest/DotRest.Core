<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
using System;
using System.Runtime.CompilerServices;

namespace DotRest
{
    /// <summary>
    /// Log interface.
    /// </summary>
	public interface ILog : IDisposable
	{
        /// <summary>
        /// Gets the log level filter.
        /// </summary>
		/// <value>Log level filter.</value>
		LogLevel Level
		{
			get;
		}

<#
var callerArgs = new List<string[]>
{
	new[]{"string", "memberName", "Caller member name (filled automatically).", "null", "CallerMemberName"},
	new[]{"string", "filePath", "Caller file name (filled automatically).", "null", "CallerFilePath"},
	new[]{"int", "lineNumber", "Caller line number (filled automatically).", "0", "CallerLineNumber"},
};

foreach (var name in new[] { "Trace", "Debug", "Info", "Warn", "Error", "ErrorException", "Fatal", "FatalException" })
{
	var exception = name.EndsWith("Exception");
	var level = !exception
		? name
		: name.Substring(0, name.Length - "Exception".Length);
	var args = new List<string[]>{
		new[]{"string", "message", "Message."}
	};
	if (exception)
	{
		args.Add(new[]{"Exception", "exception", "Exception."});
	}
	args.AddRange(callerArgs);
	var summaryName = " " + level.ToLower();
	switch (level)
	{
		case "Info":
		case "Error":
			summaryName = "n" + summaryName;
			break;
		case "Warn":
			summaryName += "ing";
			break;
		case "Fatal":
			summaryName += " error";
			break;
	}
#>
        /// <summary>
        /// Logs a<#= summaryName #> message.
        /// </summary>
<#
		foreach (var arg in args)
		{
#>
        /// <arg name="<#= arg[1] #>"><#= arg[2] #></arg>
<#
		}
#>
		void <#= level #>(<#= string.Join(", ", args.Select(a => (a.Length > 4 ? "[" + a[4] + "] " : "") + a[0] + ' ' + a[1] + (a.Length > 3 ? " = " + a[3] : ""))) #>);

<#
}
#>
	}
}
